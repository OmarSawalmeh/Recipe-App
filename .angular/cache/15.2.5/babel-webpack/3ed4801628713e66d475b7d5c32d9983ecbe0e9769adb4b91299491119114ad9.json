{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DropdownDirecive {\n  // @HostListener('click') toggleOpen() {\n  //     this.isOpen = !this.isOpen;\n  // }\n  toggleOpen(event) {\n    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n  }\n  constructor(elRef) {\n    this.elRef = elRef;\n    this.isOpen = false;\n  }\n}\nDropdownDirecive.ɵfac = function DropdownDirecive_Factory(t) {\n  return new (t || DropdownDirecive)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nDropdownDirecive.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: DropdownDirecive,\n  selectors: [[\"\", \"appDropdown\", \"\"]],\n  hostVars: 2,\n  hostBindings: function DropdownDirecive_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function DropdownDirecive_click_HostBindingHandler($event) {\n        return ctx.toggleOpen($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"open\", ctx.isOpen);\n    }\n  }\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,gBAAgB;EAGzB;EACA;EACA;EAE4CC,UAAU,CAACC,KAAY;IAC/D,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,KAAK,CAACC,aAAa,CAACC,QAAQ,CAACJ,KAAK,CAACK,MAAM,CAAC,GAAG,CAAC,IAAI,CAACJ,MAAM,GAAG,KAAK;EACxF;EAEAK,YAAoBJ,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAVE,WAAM,GAAG,KAAK;EAUD;;AAX/BJ,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAS;EAAAC;EAAAC;IAAA;;eAAhBC,sBAAkB;MAAA","names":["DropdownDirecive","toggleOpen","event","isOpen","elRef","nativeElement","contains","target","constructor","selectors","hostVars","hostBindings","ctx"],"sourceRoot":"","sources":["/home/omarsawalmeh/Angular/Project/Recipe-App/src/app/shared/dropdown.directive.ts"],"sourcesContent":["import { Directive, HostBinding, HostListener, ElementRef } from \"@angular/core\";\n\n\n@Directive({\nselector: '[appDropdown]'\n})\n\nexport class DropdownDirecive {\n    @HostBinding('class.open') isOpen = false;\n\n    // @HostListener('click') toggleOpen() {\n    //     this.isOpen = !this.isOpen;\n    // }\n    \n    @HostListener('document:click', ['$event']) toggleOpen(event: Event) {\n        this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n    }\n\n    constructor(private elRef: ElementRef) {}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}